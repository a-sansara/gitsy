#!/bin/bash
# @author   a-Sansara - https://git.pluie.org/pluie/gitsy
# @app      gitsy
# @license  GNU GPL v3 
# @date     2016-08-06 01:50:09 

   GITSY_VERSION=0.5;                GITSY_COMMAND=${1:-''}; shift
    GITSY_PARAMS="$@";                    GITSY_WK="$(pwd)"
    GITSY_ORIGIN="origin";            GITSY_UPSYNC="upsync"
     GITSY_ALIAS="spush";            GITSY_NOCOLOR=0
 GITSY_PULLFIRST=0;                    GITSY_QUIET=0
    GITSY_SCRIPT=$0;              GITSY_TERM_WIDTH=105

# -- DISPLAY -----------------------------------------------------

if [ "$GITSY_NOCOLOR" -eq 0 ]; then

             Cok="\033[0;38;5;37m";            Cko="\033[0;38;5;217m"
            Coff="\033[m";                  Ctitle="\033[1;48;5;23;1;38;5;15m"
            Cspe="\033[1;38;5;223m";         Citem="\033[1;38;5;214m"
            Cval="\033[1;38;5;215m";          Cusa="\033[1;38;5;214m"
            Cbra="\033[1;38;5;203m";         Crepo="\033[1;38;5;223m"
           Cmeta="\033[1;38;5;30m";          Ctext="\033[1;38;5;30m"
            Copt="\033[1;38;5;81m";           Csep="\033[1;38;5;241m"
            Cerr="\033[1;38;5;196m";          Ccom="\033[0;38;5;139m"
fi
gitsy.echo(){
    local      msg=${1:-''}
    local isAction=${2:-'0'}
    local   symbol=${3:-' *'}
    if [ ! "$GITSY_NOCOLOR" = 1 ]; then
        local   c=$Cko
        if [ -z "$isAction" ] || [ "$isAction" = 1 ]; then
            c=$Cok
        fi
        if [ ! "$isAction" = 0 ]; then
            c=" $Citem$symbol $c"
        fi
        echo -e " $c$msg$Coff"
    else
        if [ ! "$isAction" = 0 ]; then
            msg=" $symbol $msg"
        fi
        echo -e "$msg"
    fi
}
gitsy.echo.action(){
    gitsy.echo "$1" 1
}
gitsy.echo.keyval(){
    local c=': '
    if [ ! "$GITSY_NOCOLOR" = 1 ]; then
        c="$Citem: ${Cval}"
    fi
    gitsy.echo "  $1 $c$2" 1 " "
}
gitsy.echo.state(){
    if [ "$1" = 0 ]; then
        echo "     done !"
    else 
        echo "     fail !"
    fi
}
gitsy.echo.error(){
    echo -e "\n${Cerr}    error : ${Coff}\n\t$1 ${Coff}\n"
}
gitsy.sepline(){
    local  char=${1:-'_'}
    local width=${2:-$GITSY_TERM_WIDTH}
    echo -ne "${Csep} "
    printf "%0.s$char" $(seq 1 $width)
    echo -e "${Coff}\n"
}
gitsy.title(){
    local     msg=${1:-''}
    local version=${2:-''}
    if [ ! -z "$2" ]; then
        msg="$msg ${Cval}v$version"
    fi
    local     len="$1${version}license : GNU GPL v3   author:a-Sansara"
    gitsy.sepline
    echo -ne "  $Ctitle   $msg   $Coff"
    printf "%0.s " $(seq 1 $(($GITSY_TERM_WIDTH-${#len}-15)))
    echo -e " ${Cmeta}license : ${Coff}GNU GPL v3   ${Cmeta}author : ${Cval}a-Sansara"
    gitsy.sepline
}

# -- UTIL --------------------------------------------------------

gitsy.set.completion(){
    cat <<EOF > /etc/bash_completion.d/gitsy
_gitsy.match.infile(){
    local match=1
    local repo=''
    if [ -f "\$2" ]; then
        while read repo; do
            if [ "\$repo" = "\$1" ]; then
                match=0
                break
            fi
        done < "\$2"
    fi
    return \$match
}
_gitsy_list(){
    for name in \$(git remote -v | grep ^${GITSY_UPSYNC}[^\(]*\(push\)$ | cut -f 1); do
        _gitsy.match.infile "\$name" ".gitsy"
        if [ "\$1" = "\$?"  ]; then
            echo \$name
        fi
    done
}
_gitsy() 
{
    local cur prev opts base
    COMPREPLY=()
          cur="\${COMP_WORDS[COMP_CWORD]}"
         prev="\${COMP_WORDS[COMP_CWORD-1]}"
         opts="-v -h -q --version --help --quiet list spush add remove uninstall"
    case "\${prev}" in
        add)
            COMPREPLY=( \$(compgen -W "\$(_gitsy_list 1)" -- \${cur}) )
            return 0
            ;;
        remove)
            COMPREPLY=( \$(compgen -W "-g --git \$(_gitsy_list 0)" -- \${cur}) )
            return 0
            ;;
        -g|--git)
            COMPREPLY=( \$(compgen -W "\$(_gitsy_list 0)" -- \${cur}) )
            return 0
            ;;
        spush)
            COMPREPLY=( \$(compgen -W "-f --force \$(git remote -v | grep -v ^upsync-[^\(]*\(push\)$ |  grep -v ^upsync-[^\(]*\(fetch\)\$ | cut -f 1)" -- \${cur}) )
            return 0
            ;;
        -f|--force)
            COMPREPLY=( \$(compgen -W "\$(git remote -v | grep -v ^upsync-[^\(]*\(push\)$ |  grep -v ^upsync-[^\(]*\(fetch\)\$ | cut -f 1)" -- \${cur}) )
            return 0
            ;;
        origin)
            local running="master"
            COMPREPLY=( \$(compgen -W "\$(git branch -l | sed -e 's/*//g')" -- \${cur}) )
            return 0
            ;;
        upsync-*)
            local running=" "
            COMPREPLY=( \$(compgen -W "\${running}" -- \${cur}) )
            return 0
            ;;
        gitsy)
            ;;
        *)
            local running=" "
            COMPREPLY=( \$(compgen -W "\${running}" -- \${cur}) )
            return 0
            ;;
    esac

   COMPREPLY=(\$(compgen -W "\${opts}" -- \${cur}))  
   return 0
}
complete -F _gitsy gitsy
EOF
}
gitsy.mktemp(){
    tfile="$(mktemp)"
    if [ ! -f "$tfile" ]; then
        gitsy.echo.error "can't make temp file"
        exit 1
    fi
}
gitsy.match.infile(){
    local match=1
    local repo=''
    if [ -f "$2" ]; then
        while read repo; do
            if [ "$repo" = "$1" ]; then
                match=0
                break
            fi
        done < "$2"
    fi
    return $match
}
gitsy.match.remote(){
    local match=1
    local repo=''
    for repo in $(git remote -v | grep ^${GITSY_UPSYNC}[^\(]*\(push\)$ | cut -f 1); do
        if [ "$repo" = "$1" ]; then
            match=0
            break
        fi
    done
    return $match
}
gitsy.remove.infile(){
    local repo=''
    local data=''
    if [ -f ".gitsy" ]; then
        while read repo; do
            if [ ! "$1" = "$repo" ]; then
                data="$repo\n"
            fi
        done < .gitsy
    fi
    echo -e "$data" > "$2"
}

# -- PARAMS PARSING  ---------------------------------------------

gitsy.parse.spush.args(){
    for ((i=1;i<=${#};i++)); do
        if [ ! "${!i:0:1}" = "-" ]; then
            if [ -z "$repo" ]; then
                repo=${!i}
            else
                branch=${!i}
            fi
        else
            opt=${!i}
        fi
    done
}
gitsy.parse.remove.args(){
    for ((i=1;i<=${#};i++)); do
        if [ ! "${!i:0:1}" = "-" ]; then
            if [ -z "$repo" ]; then
                repo=${!i}
            fi
        else
            opt=${!i}
        fi
    done
}
gitsy.parse.install.args(){
    for ((i=1;i<=${#};i++)); do
        if [ ! "${!i:0:1}" = "-" ]; then
            if [ -z "$dir" ]; then
                dir=${!i}
            fi
        else
            opt=${!i}
        fi
    done
    force="false"
    if [ "$opt" = "-f" ] || [ "$opt" = "--force" ]; then
        force="true"
    fi
}

# -- COMMANDS  ---------------------------------------------------

gitsy.spush(){
    local opt repo branch i rs
    gitsy.parse.spush.args $@
    gitsy.echo.action "pushing on ${Copt}$opt ${Cspe}$repo ${Cbra}$branch\n"
    result=$(git push $opt $repo $branch 2>&1)
    rs=$?
    echo -e "$result" | sed "s/^/      /"
    if [ "$rs" = 0 ]; then
        gitsy.echo.state 0
        echo
        gisty.list
        echo
        for name in $(git remote -v | grep ^${GITSY_UPSYNC}[^\(]*\(push\)$ | cut -f 1); do
            gitsy.echo.action "pushing on ${Copt}$opt ${Cspe}$name ${Cbra}$branch"
            if [ "$GITSY_PULLFIRST" = 1 ]; then
                echo
                result=$(git pull $name $branch 2>&1)
                rs=$?
                echo -e "$result" | sed "s/^/      /"
                gitsy.echo.state "$rs"
            fi
            echo
            result=$(git push $opt $name $branch 2>&1)
            rs=$?
            echo -e "$result" | sed "s/^/      /"
            gitsy.echo.state "$rs"
            echo 
        done
    else 
        gitsy.echo.state 1
    fi
}
gitsy.remove(){
    local opt repo i
    gitsy.parse.spush.args $@
    if [ ! -z "$repo" ]; then
        if [ ! "${repo:0:${#GITSY_UPSYNC}}" = "$GITSY_UPSYNC" ]; then
            repo="$GITSY_UPSYNC-$repo"
        fi
        gitsy.echo.action "Removing ${Cspe}$repo ${Cok} repositoriy"
        gitsy.remove.infile "$repo" ".gitsy"
        echo
        gitsy.list
        if [ "$opt" = "-g" ] || [ "$opt" = "--git" ]; then
            git remote rm "$repo"
        fi
    else
        gitsy.error "you must specified a repository !"
    fi
}
gitsy.list(){
    local displayState=${1:-''}
    local name active state
    if [ -z "$displayState" ]; then
        gitsy.echo.action "listing upsync repositories : "
    fi
    for name in $(git remote -v | grep ^${GITSY_UPSYNC}[^\(]*\(push\)$ | cut -f 1); do
        gitsy.match.infile "$name" ".gitsy"
        active="${Cbra}disabled"
        state=0
        if gitsy.match.infile "$name" ".gitsy"; then
            state=1
            active="${Copt}active"
        fi
        if [ -z "$displayState" ]; then
            name=$(printf "%-30s" "$name")
            gitsy.echo "${Cspe}$name ${Copt}$active" 1 "     -"
        elif [ "$displayState" = "$state" ]; then
            echo $name
        fi
    done
}
gitsy.add(){
    if [ -d ./.git ]; then
        local repo=${1:-''}
        local  url=${2:-''}
        if [ ! -z "$repo" ]; then
            if [ ! "${repo:0:${#GITSY_UPSYNC}}" = "$GITSY_UPSYNC" ]; then
                repo="$GITSY_UPSYNC-$repo"
            fi

            if ! gitsy.match.infile "$repo" ".gitsy"; then
                gitsy.echo.action "adding ${Cspe}$repo ${Cok}repository"
                echo -e "$repo" >> ".gitsy"
            else
                gitsy.echo.action "enabling ${Cspe}$repo ${Cok}repository"
            fi
            #~ gitsy.remove.infile "$repo" ".gitsy"
            if gitsy.match.remote "$repo"; then
                gitsy.echo "    git remote already exists"
            else
                if [ -z "$url" ]; then
                    gitsy.remove.infile "$repo" ".gitsy"
                    gitsy.error "you must specified a remote url !"
                else
                    gitsy.echo.action "git adding remote ${Cspe}$repo ${Cbra}$url"
                    git remote add "$repo" "$url"
                fi
            fi
            echo
            gitsy.list
            echo -e "
     You can now use :
     ${Cspe}git $GITSY_ALIAS ${Copt}repository ${Cbra}branch${Coff}
     Or :
     ${Cspe}gitsy $GITSY_ALIAS ${Copt}repository ${Cbra}branch${Coff}
"
        else
            gitsy.error "you must specified a REPOSITORY !"
        fi
    fi
}
gitsy.error(){
    local withUsage=${2:-1}
    gitsy.echo.error "$1"
    if [ "$withUsage" = 1 ]; then
        gitsy.usage
    fi
    exit 1
}
gitsy.help(){
    gitsy.usage
}
gitsy.version(){
    echo " $GITSY_VERSION"
    exit
}
gitsy.install.version(){
    GITSY_INSTALL_VERSION=0
    if [ ! -z "$(type ${GITSY_SCRIPT##*/} 2>/dev/null)" ]; then
        GITSY_INSTALL_VERSION=$(${GITSY_SCRIPT##*/} -v)
    fi
}
gitsy.check.command(){
    case "$GITSY_COMMAND" in
        '$GITSY_ALIAS'|'add'|'remove')
            if [ -z "$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/')" ]; then
                gitsy.error "${Cval}$(pwd)${Coff} is not a git repository. 
    you must chdir to a repository before using ${Cval}$GITSY_COMMAND" 1
            fi
    esac
}
gitsy.uninstall(){
    gitsy.echo.action "Removing ${Cbra}gitsy"
    rm -f $GITSY_SCRIPT 2> /dev/null
    local rs="$?"
    if [ "$rs" = "1" ]; then
        gitsy.error "permission denied" 0
    else
        gitsy.echo.action "Removing ${Cbra}gitsy autocompletion"
        rm -f /etc/bash_completion.d/gitsy 2> /dev/null
    fi
    gitsy.echo.state "$rs"
}
gitsy.install(){
    if [ ! "$GITSY_INSTALLED" = "true" ]; then
        local dir spush uid opt force curvers usr=$(logname)
        gitsy.install.version
        gitsy.parse.install.args $@
            dir=${dir:-'/usr/bin'}
        curvers=${GITSY_INSTALL_VERSION//./}
        if [ -d "$dir" ]; then
            gitsy.echo.action "installing in ${Cspe}$dir ${Cok}directory"
            if [ ${GITSY_INSTALL_VERSION//./} -ge ${GITSY_VERSION//./} ] && [ "$force" = "false" ]; then
                gitsy.echo "
     aborting installation
     ${Cspe}gitsy${Cko} already installed with most recent version ${Cval}$GITSY_INSTALL_VERSION${Cko}
     run ${Cspe}gitsy ${Copt}install -f ${Cko}to force reinstall
"
                exit
            else
                cp $GITSY_SCRIPT "$dir/gitsy" > /dev/null 2>&1
                if [ "$?" -eq 0 ]; then
                    local data=$(head -n -1 "$dir/gitsy")
                    echo "$data
GITSY_INSTALLED=true
gitsy.main
" > "$dir/gitsy"
                    gitsy.set.completion
                    gitsy.on.install "$force" "$(logname)"
                else
                    gitsy.echo.error "permission denied"
                    gitsy.echo.state 1
                    exit 1
                fi
            fi
        else
            gitsy.echo.error "directory ${Cspe}'$dir'${Coff} does not exists"
            exit 1
        fi
    fi
}
gitsy.on.install(){
    local spush="$(git config --list | grep alias.$GITSY_ALIAS)"
    if [ ! -z "$spush" ]; then
        if [ "$spush" = "alias.$GITSY_ALIAS=!bash gitsy $GITSY_ALIAS" ]; then
            gitsy.echo "    skip adding git alias ${Cval}$GITSY_ALIAS${Cko} wich already exists"
        elif [ "$1" = "true" ]; then
            gitsy.echo.action "rewriting git alias ${Cspe}$GITSY_ALIAS"
            su -c "git config --global --unset alias.$GITSY_ALIAS" $2
            su -c "git config --global alias.$GITSY_ALIAS '!bash gitsy $GITSY_ALIAS'" $2
            
        else
            gitsy.error "git alias.$GITSY_ALIAS exists in ~/.gitconfig but has a wrong definition. remove it or rename it" 0
        fi
    else
        gitsy.echo.action "enabling git alias ${Cspe}$GITSY_ALIAS ${Cok}for user ${Cbra}$2"
        su -c "git config --global alias.$GITSY_ALIAS '!bash gitsy $GITSY_ALIAS'" $2
    fi
    gitsy.echo.state 0
}
gitsy.usage(){
    echo -e "    ${Cusa}Global Options :${Coff}\n
    \t${Copt}-${Ctext}h${Copt}, --${Ctext}help        ${Ccom}display help
    ${Copt}\t-${Ctext}v${Copt}, --${Ctext}version     ${Ccom}display program version
    ${Copt}\t-${Ctext}q${Copt}, --${Ctext}quiet       ${Ccom}quiet output\n
    ${Cusa}Usage :${Coff}\n
    ${Ccom}\tAdd an upsync repository to current project
    \tYou can choose any repo name but git remote will be automatically prefixed by 'upsync-'
    ${Cspe}\tgitsy  ${Copt}add        ${Ctext}REPOSITORY ${Copt}[ ${Ctext}URL${Copt} ]"
    if [ ! "$GITSY_INSTALLED" = "true" ]; then
        echo -e "    ${Ccom}\tInstall gitsy on specified BINDIR directory or in /usr/bin directory"
        echo -e "    ${Cspe}\tgitsy  ${Copt}install    ${Copt}[ ${Ctext}BINDIR${Copt} ]"
    fi
    echo -e "    ${Ccom}\tList the upsync repositories in current project
    ${Cspe}\tgitsy  ${Copt}list
    ${Ccom}\tRemove an upsync repository to current project ('upsync-' prefix is optionnal)
    ${Ccom}\tUse -g option to also remove corresponding remote from git current project configuration file
    ${Cspe}\tgitsy  ${Copt}remove     ${Copt}[ -${Ctext}g${Copt}, --${Ctext}git${Copt}   ] ${Ctext}REPOSITORY
    ${Ccom}\tExecute synchronized push in current project
    ${Cspe}\tgitsy  ${Copt}$GITSY_ALIAS      ${Copt}[ -${Ctext}f${Copt}, --${Ctext}force${Copt} ] ${Ctext}REPOSITORY BRANCH"
    if [ "$GITSY_INSTALLED" = "true" ]; then
        echo -e "    ${Ccom}\tUninstall gitsy"
        echo -e "    ${Cspe}\tgitsy  ${Copt}uninstall"
    fi
        echo -e "${Coff}
"
}
gitsy.main(){
    if [ "$GITSY_COMMAND" = "-v" ]; then
        echo $GITSY_VERSION
        exit
    fi
    if [ "$GITSY_COMMAND" = "-h" ] || [ "$GITSY_COMMAND" = "--help" ]; then
        GITSY_COMMAND="help"
    fi
    GITSY_CALL="gitsy.${GITSY_COMMAND//-/.}"
    gitsy.title "${GITSY_SCRIPT##*/}" "$GITSY_VERSION"
    gitsy.check.command
    if [ ! -z "$GITSY_COMMAND" ]; then
        discmd="false"
        if [ "$GITSY_COMMAND" = "install" ] && [ "$GITSY_INSTALLED" = "true" ]; then
            discmd="true"
        fi
        type $GITSY_CALL > /dev/null 2>&1
        if [ $? -eq 0 ] && [ "$discmd" = "false" ]; then
            #~ echo -e " ${Cspe}command ${Copt}$GITSY_COMMAND ${Ctext}$GITSY_PARAMS${Coff} $GITSY_CALL\n"
            $GITSY_CALL $GITSY_PARAMS
            echo
        else
            gitsy.error "invalid command ${Cspe}$GITSY_COMMAND${Coff}"
        fi
    else
        gitsy.error "you must specified a command !"
    fi
}

gitsy.main
