#!/bin/bash

  GITSY_HOOKNAME=${1:-''}; shift
    GITSY_PARAMS="$@"
      GITSY_HOOK="gitsy.${GITSY_HOOKNAME//-/.}"
        GITSY_WK="$(pwd)"
    GITSY_ORIGIN="origin"
    GITSY_UPSYNC="upsync"
   GITSY_NOCOLOR=0
 GITSY_PULLFIRST=0
    GITSY_SCRIPT=$0

if [ "$GITSY_NOCOLOR" -eq 0 ]; then
             Cok="\033[0;38;5;36m"
             Cko="\033[0;38;5;176m"
            Coff="\033[m"
          Ctitle="\033[1;48;5;30;1;38;5;15m"
           Ctsep="\033[1;48;5;30;1;38;5;227m"
            Cspe="\033[1;38;5;223m"
           Citem="\033[1;38;5;209m"
            Cval="\033[1;38;5;215m"
            Cusa="\033[1;38;5;214m"
            Cbra="\033[1;38;5;203m"
           Ctext="\033[1;38;5;30m"
            Copt="\033[1;38;5;84m"
            Cerr="\033[1;38;5;196m"
fi

function gitsy.echo(){
    local      msg=${1:-''}
    local isAction=${2:-'0'}
    local   symbol=${3:-'  *'}
    if [ ! "$GITSY_NOCOLOR" = 1 ]; then
        local   c=$Cko
        if [ -z "$isAction" ] || [ "$isAction" = 1 ]; then
            c=$Cok
        fi
        if [ ! "$isAction" = 0 ]; then
            c=" $Citem$symbol $c"
        fi
        echo -e " $c$msg$Coff"
    else
        if [ ! "$isAction" = 0 ]; then
            msg=" $symbol $msg"
        fi
        echo -e "$msg"
    fi
}

function gitsy.echo.action(){
    gitsy.echo "$1" 1
}

function gitsy.echo.keyval(){
    local c=': '
    if [ ! "$GITSY_NOCOLOR" = 1 ]; then
        c="$Citem: ${Cval}"
    fi
    gitsy.echo "  $1 $c$2" 1 " "
}

function gitsy.echo.error(){
    echo -e "${Cerr}    error : ${Coff} $1 ${Coff}\n"
}

function gitsy.title(){
    local msg=${1:-''}
    if [ ! "$GITSY_NOCOLOR" = 1 ]; then
        echo -e "\n $Ctsep :: $Ctitle$msg $Ctsep:: $Coff\n"
    else
        echo -e "\n :: $msg ::\n"
    fi
}

function gitsy.branch.trackAll(){
    local origin=${1:-$GITSY_ORIGIN}
    gitsy.title "Tracking $Cspe$origin"
    for name in $(gitsy.remote.branch $origin); do 
        git checkout -t $origin/$name > /dev/null 2>&1
        local ec=$?
        if [ $ec -eq 128 ]; then
            gitsy.echo.item "existing branch $name. pass" 0
        elif [ $ec -eq 0 ]; then
            gitsy.echo.item "tracking branch $name. done"
        fi
    done
}

function gitsy.remote.branch(){
    local origin=${1:-$GITSY_ORIGIN}
    git branch -r --color=never | grep "$origin/" | grep -v HEAD | sed -e 's/.*\///g'
}

function gitsy.upstream.track(){
      local origin=${1:-$GITSY_ORIGIN}
    local upstream=${2:-$GITSY_UPSTREAM}
    for name in $(gitsy.remote.branch $origin); do 
        git branch -t $name  $upstream/$name ;
    done
}

function gitsy.mktemp(){
    tfile="$(mktemp)"
    if [ ! -f "$tfile" ]; then
        gitsy.echo.error "can't make temp file"
        exit 1
    fi
}

function gitsy.match.infile(){
    local match=1
    local repo=''
    if [ -f "$2" ]; then
        while read repo; do
            if [ "$repo" = "$1" ]; then
                match=0
                break
            fi
        done < "$2"
    fi
    return $match
}

function gitsy.match.remote(){
    local match=1
    local repo=''
    for repo in $(git remote -v | grep ^${GITSY_UPSYNC}[^\(]*\(push\)$ | cut -f 1); do
        if [ "$repo" = "$1" ]; then
            match=0
            break
        fi
    done
    return $match
}

function gitsy.remove.infile(){
    gitsy.mktemp
    grep -v "$1" "$2" > "$tfile" && mv "$tfile" "$2"
}

function gisty.sync.list(){
    local repo=''
    if [ -f ".gitsy" ]; then
        while read repo; do
            if [ ! -z "$repo" ]; then
                echo -e "         - ${Cval}$repo${Coff}"
            fi
        done < .gitsy
    fi
}

function gitsy.post.push(){
    gitsy.echo.action "looking repositories"
    for name in $(git remote -v | grep ^${GITSY_UPSYNC}[^\(]*\(push\)$ | cut -f 1); do
        gitsy.echo.action "pushing on ${Cspe}$name ${Cbra}$2"
        if [ "$GITSY_PULLFIRST" = 1 ]; then
            echo
            git pull $name $2 2>&1 | sed "s/^/ /"
        fi
        echo
        git push $name $2 2>&1 | sed "s/^/ /"
        echo 
    done
}

function gitsy.disync(){
    local repo=${1:-''}
    if [ ! -z "$repo" ]; then
        if [ ! "${repo:0:${#GITSY_UPSYNC}}" = "$GITSY_UPSYNC" ]; then
            repo="$GITSY_UPSYNC-$repo"
        fi
        gitsy.remove.infile "$repo" ".gitsy"
        echo
        gitsy.echo.action "synchro list : "
        gisty.sync.list
    else
        gitsy.error "you must specified a repository !"
    fi
}

function gitsy.upsync(){
    if [ -d ./.git ]; then
        local repo=${1:-''}
        local  url=${2:-''}
        if [ ! -z "$repo" ]; then
            if [ ! "${repo:0:${#GITSY_UPSYNC}}" = "$GITSY_UPSYNC" ]; then
                repo="$GITSY_UPSYNC-$repo"
            fi

            if ! gitsy.match.infile "$repo" ".gitsy"; then
                gitsy.echo.action "upsync new remote repository : ${Cspe}$repo"
                echo -e "$repo" >> ".gitsy"
            else 
                gitsy.echo.action "enabling upsync remote repository : ${Cspe}$repo"
            fi
            #~ gitsy.remove.infile "$repo" ".gitsy"
            if gitsy.match.remote "$repo"; then
                gitsy.echo "     git remote already exists"
            else
                if [ -z "$url" ]; then
                    gitsy.error "you must specified a remote url !"
                else
                    gitsy.echo.action "git adding remote ${Cspe}$repo ${Cbra}$url"
                    git remote add "$repo" "$url"
                fi
            fi

            #~ if [ "$GITSY_MATCH" = "false" ]; then
                #~ echo "$repo" >> ".gitsy" 
            #~ fi

            if [ ! -z "$(git config --list | grep alias.spush)" ]; then
                gitsy.echo "     git alias spush already exists. skip"
            else
                gitsy.echo.action "enabling git alias ${Cspe}spush"
                git config alias.spush '!git push $1 $2 && gitsy post-push'
            fi
            echo
            gitsy.echo.action "synchro list : "
            gisty.sync.list
            echo -e "
      You can now use :
      ${Cspe}git spush ${Copt}repository ${Cbra}branch${Coff}
"

        else 
            gitsy.error "you must specified a REPOSITORY !"
        fi
    fi
}

function gitsy.error(){
    local withUsage=${2:-1}
    gitsy.echo.error "$1"
    if [ "$withUsage" = 1 ]; then
        gitsy.usage
        exit 1
    fi 
}

function gitsy.install(){
    local dir=${1:-'/usr/bin'}
    if [ -d "$dir" ]; then
        gitsy.echo.action "installing in ${Cspe}$dir directory"
        cp $GITSY_SCRIPT "$dir/gitsy" > /dev/null 2>&1
        if [ "$?" -eq 0 ]; then
            echo "    done !"
        else 
            gitsy.echo.error "permission denied"
            echo "    fail !"
            exit 1
        fi
    else 
        gitsy.echo.error "directory ${Cspe}'$dir'${Coff} does not exists"
        exit 1
    fi
}

function gitsy.usage(){
    echo -e "    ${Cusa}usage :${Coff}

    ${Cspe}\tgitsy  ${Copt}post-push  ${Ctext}REPOSITORY BRANCH${Coff}
    ${Cspe}\tgitsy  ${Copt}upsync     ${Ctext}REPOSITORY ${Copt}[ ${Ctext}URL${Copt} ]${Coff}
    ${Cspe}\tgitsy  ${Copt}disync     ${Ctext}REPOSITORYCoff}
    ${Cspe}\tgitsy  ${Copt}install    ${Copt}[ ${Ctext}BINDIR${Copt} ]${Coff}
"
test="upsync-toto"
        gitsy.match.infile "$test" ".gitsy"
        echo $GITSY_MATCH
#~ if [ "${test:0:${#GITSY_UPSYNC}}" = "$GITSY_UPSYNC" ]; then

#~ else
    
#~ fi
#~ echo ${test:0:${#GITSY_UPSYNC}}
}

gitsy.title " GITSY "

if [ ! -z "$GITSY_HOOKNAME" ]; then
    toto=$(type $GITSY_HOOK > /dev/null 2>&1)
    if [ $? -eq 0 ]; then
        echo -e " ${Cspe}gitsy ${Copt}$GITSY_HOOKNAME ${Ctext}$GITSY_PARAMS${Coff}"
        echo
        $GITSY_HOOK $GITSY_PARAMS
        echo
    else 
        gitsy.error "invalid command ${Cspe}$GITSY_HOOKNAME${Coff}"
    fi
else 
    gitsy.error "you must specified a command !"
fi
#~ echo [alias]
        #~ xpush = !git push $1 $2 && bin/hook post-push

